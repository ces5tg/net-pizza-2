@inject HttpClient HttpClient
@inject OrderState OrderState
@inject IJSRuntime JavaScript
<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            <h2>@Pizza.Special!.Name</h2>
            @Pizza.Special.Description
        </div>
        <form class="dialog-body">
            <div>
                @if (supportSizing)
                    {
                        <label>Size:</label>
                        <input type="range" min="@Pizza.MinimumSize" max="@Pizza.MaximumSize"
                            step="1" @bind="Pizza.Size" @bind:event="oninput" />
                    }
                <span class="size-label">
                    @(Pizza.Size)" (£@(Pizza.GetFormattedTotalPrice()))
                </span>
            </div>
            <div>
                <label>Complementos:</label>
                <select @onchange="handleSeleccionado">
                <option value="" disabled selected>Selecciona un topping</option>
                    @foreach (var topping in Toppings)
                    {
                        <option value="@topping.Id">@topping.Name</option>
                    }
                </select>

               
                
            </div>
             <div>
                    
                    @if (OrderState.Topping.Count > 0)
                    {
                        <div>
                            <p>Toppings seleccionados:</p>
                            @foreach (var seleccionado in OrderState.Topping)
                            {
                                <p>@seleccionado.Topping.Name - @seleccionado.Topping.Price </p>
                               <button class="btn btn-success ml-auto"
        @onclick="async (e) => { e.PreventDefault(); await OrderState.RemoveConfiguredTopping(seleccionado); }">
    x
</button>

                            }
                        </div>
                    }
                </div>
        </form>

        <div class="dialog-buttons">
            <button class="btn btn-secondary mr-auto" @onclick="OnCancel">Cancel</button>
            <span class="mr-center">
                Price: <span class="price">@(Pizza.GetFormattedTotalPrice())</span>
                 Price: <span class="price">@(Pizza.GetFormattedToppingsPrice(ToppingsSeleccionados))</span>
            </span>
            <button class="btn btn-success ml-auto" @onclick="OnConfirm">Order ></button>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] 
    public required Pizza Pizza { get; set; }

    [Parameter, EditorRequired] 
   public required List<Topping> Toppings { get; set; }


    [Parameter, EditorRequired] 
    public EventCallback OnCancel { get; set; }
    [Parameter, EditorRequired] 
    public EventCallback OnConfirm { get; set; }

    bool supportSizing = true;

    public List<PizzaTopping> ToppingsSeleccionados { get; set; } = new List<PizzaTopping>();
     public List<PizzaTopping> ToppingsSeleccionado2 => OrderState.Topping;
    private void handleSeleccionado(ChangeEventArgs e)
    {

    // Obtener el ID seleccionado como entero
        int selectedId = Convert.ToInt32(e.Value);

        // Buscar el topping correspondiente en base al ID
        Topping selectedTopping = Toppings.FirstOrDefault(t => t.Id == selectedId);

        // Verificar si se encontró el topping
        if (selectedTopping != null && !ToppingsSeleccionado2.Any(t => t.ToppingId == selectedId))
        {
            // Imprimir el ID, nombre y precio del topping seleccionado
            <!-- Console.WriteLine($"ID: {selectedTopping.Id}, Nombre: {selectedTopping.Name}, Precio: {selectedTopping.GetFormattedPrice()}"); -->
            PizzaTopping pizzaTopping = new PizzaTopping
            {
                Topping = selectedTopping, // El objeto Topping que deseas agregar
                ToppingId = selectedTopping.Id, // El ID del topping
                PizzaId = Pizza.Id // El ID de la pizza
            };

            ToppingsSeleccionado2.Add(pizzaTopping);
            
            // Aquí puedes almacenar el objeto selectedTopping o realizar cualquier otra acción que necesites con él
        }
    }

private void RemoveTopping(PizzaTopping seleccionado)
{
    ToppingsSeleccionado2.Remove(seleccionado);
}


    protected override void OnInitialized()
    {
        if (Pizza is { Special.FixedSize: not null })
        {
            Pizza.Size = Pizza.Special.FixedSize.Value;
            supportSizing = false;
        }
    }
}