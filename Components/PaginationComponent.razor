@typeparam TItem
<div class="container-sm py-4">
   <p> ElementAt ANTES-----</p>
    @ItemContent(Items.ElementAt(selectedIndex))
    <p> ElementAt -----</p>
</div>
<nav aria-label="Pagination functionality">
    <p>---------------------------- > 1 </p>
    <ul class="pagination pagination-lg justify-content-center">
        <li class="page-item @(previousDisabled ? "disabled" : "")" disabled="@previousDisabled">
            <a class="page-link" @onclick="@(() => SetIndex(0))">
                <span>⏪</span>
            </a>
        </li>
        <li class="page-item @(previousDisabled ? "disabled" : "")" disabled="@previousDisabled">
            <a class="page-link" @onclick="DecrementIndex"><span>⬅️</span></a>
        </li>
        @foreach ((int index, TItem item) in Items.Select((item, index) => (index, item)))
        {var isActive = index == selectedIndex;
            <li class="page-item @(isActive ? "active" :"")">
                <a class="page-link" @onclick="@(() => SetIndex(index))">
                    @ItemLabel(item)
                </a>
            </li>}
        <li class="page-item @(nextDisabled ? "disabled" : "")" disabled="@nextDisabled">
            <a class="page-link" @onclick="IncrementIndex"><span>➡️</span></a>
        </li>
        <li class="page-item @(nextDisabled ? "disabled" : "")" disabled="@nextDisabled">
            <a class="page-link" @onclick="@(() => SetIndex(Items.Count - 1))">
                <span>⏩</span>
            </a>
        </li>
    </ul>
    <p>---------------------------- > 1 </p>
</nav>
@code {
    <!-- parameter -> parametro del componente -->
    <!-- EditorRequired -> marca el parametro como requerido -->
    [Parameter, EditorRequired]
    public required List<TItem> Items { get; set; }
    [Parameter, EditorRequired]
    public required RenderFragment<TItem> ItemContent { get; set; }
    [Parameter, EditorRequired]
    public required Func<TItem, MarkupString> ItemLabel { get; set; }
    <!-- toma un dato de tipo ITem y devuelve una cadena de marcado de html-->
    int selectedIndex;
    bool previousDisabled => selectedIndex == 0;
    bool nextDisabled => selectedIndex == Items.Count - 1;
    void IncrementIndex() => selectedIndex++;
    void DecrementIndex() => selectedIndex--;
    void SetIndex(int index) => selectedIndex = index;
    protected override void OnInitialized() =>
        selectedIndex = Items.Count - 1;
}